/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation UpdateStoreProfile($input: StoreInput!, $defaultDomain: String!) {\n    updateStoreProfile(input: $input, defaultDomain: $defaultDomain) {\n      store {\n        name\n        email\n        billingAddress {\n          phone\n        }\n      }\n    }\n  }\n": typeof types.UpdateStoreProfileDocument,
    "\n  mutation UpdateStoreAddress($input: StoreAddressInput!, $defaultDomain: String!) {\n    updateStoreAddress(input: $input, defaultDomain: $defaultDomain) {\n      billingAddress {\n        address1\n        address2\n        city\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n": typeof types.UpdateStoreAddressDocument,
    "\n  mutation CreateProductMutation($product: ProductInput!, $defaultDomain: String!) {\n    createProduct(product: $product, defaultDomain: $defaultDomain) {\n      product {\n        id\n        productId\n      }\n    }\n  }\n": typeof types.CreateProductMutationDocument,
    "\n  mutation CreateProductVariantMutation($productId: ID!,$variantInputs: ProductVariantInput!, $defaultDomain: String!) {\n    createProductVariant(productId: $productId,variantInputs: $variantInputs, defaultDomain: $defaultDomain) {\n      productVariant {\n        id\n      }\n    }\n  }\n": typeof types.CreateProductVariantMutationDocument,
    "\n  mutation UpdateProductVariantMutation($variantInputs: ProductVariantInput!,$defaultDomain: String!) {\n    updateProductVariant(variantInputs: $variantInputs, defaultDomain: $defaultDomain) {\n      productVariant {\n        variantId\n      }\n    }\n  }\n": typeof types.UpdateProductVariantMutationDocument,
    "\n  mutation ProductSaveUpdate($id:ID! , $defaultDomain: String! , $product: ProductInput!) {\n    updateProduct(id: $id ,defaultDomain: $defaultDomain , product: $product) {\n      product {\n        id\n      }\n    }\n  }\n": typeof types.ProductSaveUpdateDocument,
    "\n  mutation AddMediaImagesProduct($defaultDomain: String!, $productId: ID!$imageIds: [ID]!) {\n    addImagesProduct(defaultDomain: $defaultDomain ,productId: $productId,imageIds: $imageIds) {\n      product {\n        id\n      }\n    }\n  }\n": typeof types.AddMediaImagesProductDocument,
    "\n  mutation RemoveMediaImagesProduct($defaultDomain: String!, $productId: ID!$imageIds: [ID]!) {\n    removeImagesProduct(defaultDomain: $defaultDomain ,productId: $productId,imageIds: $imageIds) {\n      product {\n        id\n    }\n  }\n}": typeof types.RemoveMediaImagesProductDocument,
    "\n  mutation PerformActionOnVariants($action: VariantActions!, $variantIds: [ID!]!, $defaultDomain: String!) {\n    performActionOnVariants(action: $action, variantIds: $variantIds, defaultDomain: $defaultDomain) {\n      success\n      message\n      errors\n    }\n  }\n": typeof types.PerformActionOnVariantsDocument,
    "\n  mutation AdminCreateCollection($collectionInputs:CollectionInputs!,$domain: String!) {\n    createCollection(collectionInputs:$collectionInputs,defaultDomain:$domain) {\n      collection {\n        collectionId\n      }\n    }\n  }\n": typeof types.AdminCreateCollectionDocument,
    "\n  mutation UpdateCollection($collectionId: ID!$collectionInputs:CollectionInputs!, $domain: String!) {\n    updateCollection(collectionId: $collectionId,collectionInputs:$collectionInputs ,defaultDomain:$domain) {\n      collection {\n        title\n        description\n        handle\n        image {\n          image\n        }\n        seo {\n          title\n          description\n        }\n      }\n    }\n  }\n": typeof types.UpdateCollectionDocument,
    "\n  mutation AddProductsToCollection($collectionId : ID! $productIds: [ID]! $domain: String!) {\n    addProductsToCollection(collectionId:$collectionId productIds:$productIds defaultDomain:$domain) {\n      success\n    }\n  }\n": typeof types.AddProductsToCollectionDocument,
    "\n  mutation DeleteProductsFromCollection($collectionId : ID! $productIds: [ID]! $domain: String!) {\n    deleteProductsFromCollection(collectionId:$collectionId productIds:$productIds defaultDomain:$domain) {\n      success\n    }\n  }\n": typeof types.DeleteProductsFromCollectionDocument,
    "\n  mutation AdminDeleteCollections($collectionIds: [ID]! $domain: String!) {\n    deleteCollections(collectionIds:$collectionIds defaultDomain:$domain) {\n      success\n    }\n  }\n": typeof types.AdminDeleteCollectionsDocument,
    "\n  mutation CreateCustomer($customerInputs: CustomerInputs!, $defaultDomain: String!) { \n    createCustomer(input: {customerInputs: $customerInputs, defaultDomain: $defaultDomain}) {\n        customer {\n            customerId\n        }\n    }\n  }\n": typeof types.CreateCustomerDocument,
    "\n  mutation UpdateCustomer($customerInputs: CustomerInputs!, $id: ID!) { \n    updateCustomer(input: {customerInputs: $customerInputs, id: $id}) {\n        customer {\n            customerId\n        }\n    }\n  }\n": typeof types.UpdateCustomerDocument,
    "\n  mutation DeleteCustomer($id: ID!) { \n    deleteCustomer(input: {id: $id}) {\n        success\n    }\n  }\n": typeof types.DeleteCustomerDocument,
    "\n  query SettingsGeneral($domain: String!) {\n    store(defaultDomain: $domain) {\n      name\n      email\n      currencyCode\n      billingAddress {\n        phone\n        address1\n        address2\n        city\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n": typeof types.SettingsGeneralDocument,
    "\n  query ProductIndex(\n    $domain: String!\n    $first: Int\n    $after: String!\n    $search: String!\n    $status: ProductProductStatusChoices\n  ) {\n    allProducts(\n      defaultDomain: $domain\n      first: $first\n      after: $after\n      title_Icontains: $search\n      status: $status\n    ) {\n      edges {\n        node {\n          id\n          title\n          status\n          productId\n          image {\n            image\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": typeof types.ProductIndexDocument,
    "\n  query GetProductById($id: ID!) {\n    product(id: $id) {\n      title\n      description\n      status\n      handle\n      collections {\n        title\n        collectionId\n      }\n      seo {\n        title\n        description\n      }\n      firstVariant {\n        pricing {\n          amount\n          currency\n        }\n        compareAtPrice\n        stock\n      }\n      options {\n        id\n        name\n        values {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.GetProductByIdDocument,
    "\n  query GetMediaImages($domain: String!, $first: Int, $after: String!) {\n    allMediaImages(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          image\n          id\n          imageId\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": typeof types.GetMediaImagesDocument,
    "\n  query GetMediaProduct($productId: ID!, $after: String!) {\n    getImagesProduct(productId: $productId, first: 10, after: $after) {\n      edges {\n        node {\n          image\n          id\n          imageId\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": typeof types.GetMediaProductDocument,
    "\n  query AdminProductDetailsVariants(\n    $productId: ID!\n    $first: Int\n    $after: String!\n  ) {\n    productDetailsVariants(\n      productId: $productId\n      first: $first\n      after: $after\n    ) {\n      edges {\n        node {\n          id\n          variantId\n          pricing {\n            amount\n            currency\n          }\n          stock\n          selectedOptions {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": typeof types.AdminProductDetailsVariantsDocument,
    "\n  query AdminCollectionsList($domain: String!, $first: Int, $after: String!) {\n    allCollections(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          collectionId\n          title\n          description\n          productsCount\n          image {\n            image\n          }\n          seo {\n            title\n            description\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": typeof types.AdminCollectionsListDocument,
    "\n  query AdminCollectionById($id: ID!) {\n    collectionById(id: $id) {\n      collectionId\n      title\n      description\n      productsCount\n      handle\n      seo {\n        title\n        description\n      }\n      image {\n        image\n        imageId\n      }\n    }\n  }\n": typeof types.AdminCollectionByIdDocument,
    "\n  query AdminProductsByCollection(\n    $collectionId: ID!\n    $first: Int\n    $after: String!\n  ) {\n    productsByCollection(\n      collectionId: $collectionId\n      first: $first\n      after: $after\n    ) {\n      edges {\n        node {\n          id\n          productId\n          title\n          status\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": typeof types.AdminProductsByCollectionDocument,
    "\n  query AdminProductResourceCollection(\n    $collectionId: ID!\n    $first: Int\n    $after: String!\n    $search: String!\n  ) {\n    productResourceCollection(\n      collectionId: $collectionId\n      first: $first\n      after: $after\n      title_Icontains: $search\n    ) {\n      edges {\n        node {\n          id\n          productId\n          title\n          inCollection\n        }\n      }\n    }\n  }\n": typeof types.AdminProductResourceCollectionDocument,
    "\n  query AdminCollectionsFind($domain: String!, $search: String!, $first: Int) {\n    collectionsFind(\n      defaultDomain: $domain\n      title_Icontains: $search\n      first: $first\n    ) {\n      edges {\n        node {\n          title\n          collectionId\n        }\n      }\n    }\n  }\n": typeof types.AdminCollectionsFindDocument,
    "\n  query CustomerListAdmin($domain: String!, $first: Int, $after: String!) {\n    customerListAdmin(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          customerId\n          fullName\n          defaultAddress {\n            country {\n              name\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": typeof types.CustomerListAdminDocument,
    "\n  query CustomerDetails($id: ID!) {\n    customerDetails(id: $id) {\n      firstName\n      lastName\n      email\n      defaultAddress {\n        address1\n        address2\n        city\n        phone\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n": typeof types.CustomerDetailsDocument,
};
const documents: Documents = {
    "\n  mutation UpdateStoreProfile($input: StoreInput!, $defaultDomain: String!) {\n    updateStoreProfile(input: $input, defaultDomain: $defaultDomain) {\n      store {\n        name\n        email\n        billingAddress {\n          phone\n        }\n      }\n    }\n  }\n": types.UpdateStoreProfileDocument,
    "\n  mutation UpdateStoreAddress($input: StoreAddressInput!, $defaultDomain: String!) {\n    updateStoreAddress(input: $input, defaultDomain: $defaultDomain) {\n      billingAddress {\n        address1\n        address2\n        city\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n": types.UpdateStoreAddressDocument,
    "\n  mutation CreateProductMutation($product: ProductInput!, $defaultDomain: String!) {\n    createProduct(product: $product, defaultDomain: $defaultDomain) {\n      product {\n        id\n        productId\n      }\n    }\n  }\n": types.CreateProductMutationDocument,
    "\n  mutation CreateProductVariantMutation($productId: ID!,$variantInputs: ProductVariantInput!, $defaultDomain: String!) {\n    createProductVariant(productId: $productId,variantInputs: $variantInputs, defaultDomain: $defaultDomain) {\n      productVariant {\n        id\n      }\n    }\n  }\n": types.CreateProductVariantMutationDocument,
    "\n  mutation UpdateProductVariantMutation($variantInputs: ProductVariantInput!,$defaultDomain: String!) {\n    updateProductVariant(variantInputs: $variantInputs, defaultDomain: $defaultDomain) {\n      productVariant {\n        variantId\n      }\n    }\n  }\n": types.UpdateProductVariantMutationDocument,
    "\n  mutation ProductSaveUpdate($id:ID! , $defaultDomain: String! , $product: ProductInput!) {\n    updateProduct(id: $id ,defaultDomain: $defaultDomain , product: $product) {\n      product {\n        id\n      }\n    }\n  }\n": types.ProductSaveUpdateDocument,
    "\n  mutation AddMediaImagesProduct($defaultDomain: String!, $productId: ID!$imageIds: [ID]!) {\n    addImagesProduct(defaultDomain: $defaultDomain ,productId: $productId,imageIds: $imageIds) {\n      product {\n        id\n      }\n    }\n  }\n": types.AddMediaImagesProductDocument,
    "\n  mutation RemoveMediaImagesProduct($defaultDomain: String!, $productId: ID!$imageIds: [ID]!) {\n    removeImagesProduct(defaultDomain: $defaultDomain ,productId: $productId,imageIds: $imageIds) {\n      product {\n        id\n    }\n  }\n}": types.RemoveMediaImagesProductDocument,
    "\n  mutation PerformActionOnVariants($action: VariantActions!, $variantIds: [ID!]!, $defaultDomain: String!) {\n    performActionOnVariants(action: $action, variantIds: $variantIds, defaultDomain: $defaultDomain) {\n      success\n      message\n      errors\n    }\n  }\n": types.PerformActionOnVariantsDocument,
    "\n  mutation AdminCreateCollection($collectionInputs:CollectionInputs!,$domain: String!) {\n    createCollection(collectionInputs:$collectionInputs,defaultDomain:$domain) {\n      collection {\n        collectionId\n      }\n    }\n  }\n": types.AdminCreateCollectionDocument,
    "\n  mutation UpdateCollection($collectionId: ID!$collectionInputs:CollectionInputs!, $domain: String!) {\n    updateCollection(collectionId: $collectionId,collectionInputs:$collectionInputs ,defaultDomain:$domain) {\n      collection {\n        title\n        description\n        handle\n        image {\n          image\n        }\n        seo {\n          title\n          description\n        }\n      }\n    }\n  }\n": types.UpdateCollectionDocument,
    "\n  mutation AddProductsToCollection($collectionId : ID! $productIds: [ID]! $domain: String!) {\n    addProductsToCollection(collectionId:$collectionId productIds:$productIds defaultDomain:$domain) {\n      success\n    }\n  }\n": types.AddProductsToCollectionDocument,
    "\n  mutation DeleteProductsFromCollection($collectionId : ID! $productIds: [ID]! $domain: String!) {\n    deleteProductsFromCollection(collectionId:$collectionId productIds:$productIds defaultDomain:$domain) {\n      success\n    }\n  }\n": types.DeleteProductsFromCollectionDocument,
    "\n  mutation AdminDeleteCollections($collectionIds: [ID]! $domain: String!) {\n    deleteCollections(collectionIds:$collectionIds defaultDomain:$domain) {\n      success\n    }\n  }\n": types.AdminDeleteCollectionsDocument,
    "\n  mutation CreateCustomer($customerInputs: CustomerInputs!, $defaultDomain: String!) { \n    createCustomer(input: {customerInputs: $customerInputs, defaultDomain: $defaultDomain}) {\n        customer {\n            customerId\n        }\n    }\n  }\n": types.CreateCustomerDocument,
    "\n  mutation UpdateCustomer($customerInputs: CustomerInputs!, $id: ID!) { \n    updateCustomer(input: {customerInputs: $customerInputs, id: $id}) {\n        customer {\n            customerId\n        }\n    }\n  }\n": types.UpdateCustomerDocument,
    "\n  mutation DeleteCustomer($id: ID!) { \n    deleteCustomer(input: {id: $id}) {\n        success\n    }\n  }\n": types.DeleteCustomerDocument,
    "\n  query SettingsGeneral($domain: String!) {\n    store(defaultDomain: $domain) {\n      name\n      email\n      currencyCode\n      billingAddress {\n        phone\n        address1\n        address2\n        city\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n": types.SettingsGeneralDocument,
    "\n  query ProductIndex(\n    $domain: String!\n    $first: Int\n    $after: String!\n    $search: String!\n    $status: ProductProductStatusChoices\n  ) {\n    allProducts(\n      defaultDomain: $domain\n      first: $first\n      after: $after\n      title_Icontains: $search\n      status: $status\n    ) {\n      edges {\n        node {\n          id\n          title\n          status\n          productId\n          image {\n            image\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.ProductIndexDocument,
    "\n  query GetProductById($id: ID!) {\n    product(id: $id) {\n      title\n      description\n      status\n      handle\n      collections {\n        title\n        collectionId\n      }\n      seo {\n        title\n        description\n      }\n      firstVariant {\n        pricing {\n          amount\n          currency\n        }\n        compareAtPrice\n        stock\n      }\n      options {\n        id\n        name\n        values {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetProductByIdDocument,
    "\n  query GetMediaImages($domain: String!, $first: Int, $after: String!) {\n    allMediaImages(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          image\n          id\n          imageId\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.GetMediaImagesDocument,
    "\n  query GetMediaProduct($productId: ID!, $after: String!) {\n    getImagesProduct(productId: $productId, first: 10, after: $after) {\n      edges {\n        node {\n          image\n          id\n          imageId\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.GetMediaProductDocument,
    "\n  query AdminProductDetailsVariants(\n    $productId: ID!\n    $first: Int\n    $after: String!\n  ) {\n    productDetailsVariants(\n      productId: $productId\n      first: $first\n      after: $after\n    ) {\n      edges {\n        node {\n          id\n          variantId\n          pricing {\n            amount\n            currency\n          }\n          stock\n          selectedOptions {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.AdminProductDetailsVariantsDocument,
    "\n  query AdminCollectionsList($domain: String!, $first: Int, $after: String!) {\n    allCollections(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          collectionId\n          title\n          description\n          productsCount\n          image {\n            image\n          }\n          seo {\n            title\n            description\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.AdminCollectionsListDocument,
    "\n  query AdminCollectionById($id: ID!) {\n    collectionById(id: $id) {\n      collectionId\n      title\n      description\n      productsCount\n      handle\n      seo {\n        title\n        description\n      }\n      image {\n        image\n        imageId\n      }\n    }\n  }\n": types.AdminCollectionByIdDocument,
    "\n  query AdminProductsByCollection(\n    $collectionId: ID!\n    $first: Int\n    $after: String!\n  ) {\n    productsByCollection(\n      collectionId: $collectionId\n      first: $first\n      after: $after\n    ) {\n      edges {\n        node {\n          id\n          productId\n          title\n          status\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.AdminProductsByCollectionDocument,
    "\n  query AdminProductResourceCollection(\n    $collectionId: ID!\n    $first: Int\n    $after: String!\n    $search: String!\n  ) {\n    productResourceCollection(\n      collectionId: $collectionId\n      first: $first\n      after: $after\n      title_Icontains: $search\n    ) {\n      edges {\n        node {\n          id\n          productId\n          title\n          inCollection\n        }\n      }\n    }\n  }\n": types.AdminProductResourceCollectionDocument,
    "\n  query AdminCollectionsFind($domain: String!, $search: String!, $first: Int) {\n    collectionsFind(\n      defaultDomain: $domain\n      title_Icontains: $search\n      first: $first\n    ) {\n      edges {\n        node {\n          title\n          collectionId\n        }\n      }\n    }\n  }\n": types.AdminCollectionsFindDocument,
    "\n  query CustomerListAdmin($domain: String!, $first: Int, $after: String!) {\n    customerListAdmin(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          customerId\n          fullName\n          defaultAddress {\n            country {\n              name\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.CustomerListAdminDocument,
    "\n  query CustomerDetails($id: ID!) {\n    customerDetails(id: $id) {\n      firstName\n      lastName\n      email\n      defaultAddress {\n        address1\n        address2\n        city\n        phone\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n": types.CustomerDetailsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateStoreProfile($input: StoreInput!, $defaultDomain: String!) {\n    updateStoreProfile(input: $input, defaultDomain: $defaultDomain) {\n      store {\n        name\n        email\n        billingAddress {\n          phone\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateStoreProfile($input: StoreInput!, $defaultDomain: String!) {\n    updateStoreProfile(input: $input, defaultDomain: $defaultDomain) {\n      store {\n        name\n        email\n        billingAddress {\n          phone\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateStoreAddress($input: StoreAddressInput!, $defaultDomain: String!) {\n    updateStoreAddress(input: $input, defaultDomain: $defaultDomain) {\n      billingAddress {\n        address1\n        address2\n        city\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateStoreAddress($input: StoreAddressInput!, $defaultDomain: String!) {\n    updateStoreAddress(input: $input, defaultDomain: $defaultDomain) {\n      billingAddress {\n        address1\n        address2\n        city\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateProductMutation($product: ProductInput!, $defaultDomain: String!) {\n    createProduct(product: $product, defaultDomain: $defaultDomain) {\n      product {\n        id\n        productId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductMutation($product: ProductInput!, $defaultDomain: String!) {\n    createProduct(product: $product, defaultDomain: $defaultDomain) {\n      product {\n        id\n        productId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateProductVariantMutation($productId: ID!,$variantInputs: ProductVariantInput!, $defaultDomain: String!) {\n    createProductVariant(productId: $productId,variantInputs: $variantInputs, defaultDomain: $defaultDomain) {\n      productVariant {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductVariantMutation($productId: ID!,$variantInputs: ProductVariantInput!, $defaultDomain: String!) {\n    createProductVariant(productId: $productId,variantInputs: $variantInputs, defaultDomain: $defaultDomain) {\n      productVariant {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateProductVariantMutation($variantInputs: ProductVariantInput!,$defaultDomain: String!) {\n    updateProductVariant(variantInputs: $variantInputs, defaultDomain: $defaultDomain) {\n      productVariant {\n        variantId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProductVariantMutation($variantInputs: ProductVariantInput!,$defaultDomain: String!) {\n    updateProductVariant(variantInputs: $variantInputs, defaultDomain: $defaultDomain) {\n      productVariant {\n        variantId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ProductSaveUpdate($id:ID! , $defaultDomain: String! , $product: ProductInput!) {\n    updateProduct(id: $id ,defaultDomain: $defaultDomain , product: $product) {\n      product {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductSaveUpdate($id:ID! , $defaultDomain: String! , $product: ProductInput!) {\n    updateProduct(id: $id ,defaultDomain: $defaultDomain , product: $product) {\n      product {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddMediaImagesProduct($defaultDomain: String!, $productId: ID!$imageIds: [ID]!) {\n    addImagesProduct(defaultDomain: $defaultDomain ,productId: $productId,imageIds: $imageIds) {\n      product {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddMediaImagesProduct($defaultDomain: String!, $productId: ID!$imageIds: [ID]!) {\n    addImagesProduct(defaultDomain: $defaultDomain ,productId: $productId,imageIds: $imageIds) {\n      product {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveMediaImagesProduct($defaultDomain: String!, $productId: ID!$imageIds: [ID]!) {\n    removeImagesProduct(defaultDomain: $defaultDomain ,productId: $productId,imageIds: $imageIds) {\n      product {\n        id\n    }\n  }\n}"): (typeof documents)["\n  mutation RemoveMediaImagesProduct($defaultDomain: String!, $productId: ID!$imageIds: [ID]!) {\n    removeImagesProduct(defaultDomain: $defaultDomain ,productId: $productId,imageIds: $imageIds) {\n      product {\n        id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation PerformActionOnVariants($action: VariantActions!, $variantIds: [ID!]!, $defaultDomain: String!) {\n    performActionOnVariants(action: $action, variantIds: $variantIds, defaultDomain: $defaultDomain) {\n      success\n      message\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation PerformActionOnVariants($action: VariantActions!, $variantIds: [ID!]!, $defaultDomain: String!) {\n    performActionOnVariants(action: $action, variantIds: $variantIds, defaultDomain: $defaultDomain) {\n      success\n      message\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AdminCreateCollection($collectionInputs:CollectionInputs!,$domain: String!) {\n    createCollection(collectionInputs:$collectionInputs,defaultDomain:$domain) {\n      collection {\n        collectionId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AdminCreateCollection($collectionInputs:CollectionInputs!,$domain: String!) {\n    createCollection(collectionInputs:$collectionInputs,defaultDomain:$domain) {\n      collection {\n        collectionId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateCollection($collectionId: ID!$collectionInputs:CollectionInputs!, $domain: String!) {\n    updateCollection(collectionId: $collectionId,collectionInputs:$collectionInputs ,defaultDomain:$domain) {\n      collection {\n        title\n        description\n        handle\n        image {\n          image\n        }\n        seo {\n          title\n          description\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCollection($collectionId: ID!$collectionInputs:CollectionInputs!, $domain: String!) {\n    updateCollection(collectionId: $collectionId,collectionInputs:$collectionInputs ,defaultDomain:$domain) {\n      collection {\n        title\n        description\n        handle\n        image {\n          image\n        }\n        seo {\n          title\n          description\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddProductsToCollection($collectionId : ID! $productIds: [ID]! $domain: String!) {\n    addProductsToCollection(collectionId:$collectionId productIds:$productIds defaultDomain:$domain) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation AddProductsToCollection($collectionId : ID! $productIds: [ID]! $domain: String!) {\n    addProductsToCollection(collectionId:$collectionId productIds:$productIds defaultDomain:$domain) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteProductsFromCollection($collectionId : ID! $productIds: [ID]! $domain: String!) {\n    deleteProductsFromCollection(collectionId:$collectionId productIds:$productIds defaultDomain:$domain) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteProductsFromCollection($collectionId : ID! $productIds: [ID]! $domain: String!) {\n    deleteProductsFromCollection(collectionId:$collectionId productIds:$productIds defaultDomain:$domain) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AdminDeleteCollections($collectionIds: [ID]! $domain: String!) {\n    deleteCollections(collectionIds:$collectionIds defaultDomain:$domain) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation AdminDeleteCollections($collectionIds: [ID]! $domain: String!) {\n    deleteCollections(collectionIds:$collectionIds defaultDomain:$domain) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateCustomer($customerInputs: CustomerInputs!, $defaultDomain: String!) { \n    createCustomer(input: {customerInputs: $customerInputs, defaultDomain: $defaultDomain}) {\n        customer {\n            customerId\n        }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCustomer($customerInputs: CustomerInputs!, $defaultDomain: String!) { \n    createCustomer(input: {customerInputs: $customerInputs, defaultDomain: $defaultDomain}) {\n        customer {\n            customerId\n        }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateCustomer($customerInputs: CustomerInputs!, $id: ID!) { \n    updateCustomer(input: {customerInputs: $customerInputs, id: $id}) {\n        customer {\n            customerId\n        }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCustomer($customerInputs: CustomerInputs!, $id: ID!) { \n    updateCustomer(input: {customerInputs: $customerInputs, id: $id}) {\n        customer {\n            customerId\n        }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteCustomer($id: ID!) { \n    deleteCustomer(input: {id: $id}) {\n        success\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCustomer($id: ID!) { \n    deleteCustomer(input: {id: $id}) {\n        success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SettingsGeneral($domain: String!) {\n    store(defaultDomain: $domain) {\n      name\n      email\n      currencyCode\n      billingAddress {\n        phone\n        address1\n        address2\n        city\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SettingsGeneral($domain: String!) {\n    store(defaultDomain: $domain) {\n      name\n      email\n      currencyCode\n      billingAddress {\n        phone\n        address1\n        address2\n        city\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductIndex(\n    $domain: String!\n    $first: Int\n    $after: String!\n    $search: String!\n    $status: ProductProductStatusChoices\n  ) {\n    allProducts(\n      defaultDomain: $domain\n      first: $first\n      after: $after\n      title_Icontains: $search\n      status: $status\n    ) {\n      edges {\n        node {\n          id\n          title\n          status\n          productId\n          image {\n            image\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductIndex(\n    $domain: String!\n    $first: Int\n    $after: String!\n    $search: String!\n    $status: ProductProductStatusChoices\n  ) {\n    allProducts(\n      defaultDomain: $domain\n      first: $first\n      after: $after\n      title_Icontains: $search\n      status: $status\n    ) {\n      edges {\n        node {\n          id\n          title\n          status\n          productId\n          image {\n            image\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProductById($id: ID!) {\n    product(id: $id) {\n      title\n      description\n      status\n      handle\n      collections {\n        title\n        collectionId\n      }\n      seo {\n        title\n        description\n      }\n      firstVariant {\n        pricing {\n          amount\n          currency\n        }\n        compareAtPrice\n        stock\n      }\n      options {\n        id\n        name\n        values {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductById($id: ID!) {\n    product(id: $id) {\n      title\n      description\n      status\n      handle\n      collections {\n        title\n        collectionId\n      }\n      seo {\n        title\n        description\n      }\n      firstVariant {\n        pricing {\n          amount\n          currency\n        }\n        compareAtPrice\n        stock\n      }\n      options {\n        id\n        name\n        values {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMediaImages($domain: String!, $first: Int, $after: String!) {\n    allMediaImages(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          image\n          id\n          imageId\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMediaImages($domain: String!, $first: Int, $after: String!) {\n    allMediaImages(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          image\n          id\n          imageId\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMediaProduct($productId: ID!, $after: String!) {\n    getImagesProduct(productId: $productId, first: 10, after: $after) {\n      edges {\n        node {\n          image\n          id\n          imageId\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMediaProduct($productId: ID!, $after: String!) {\n    getImagesProduct(productId: $productId, first: 10, after: $after) {\n      edges {\n        node {\n          image\n          id\n          imageId\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminProductDetailsVariants(\n    $productId: ID!\n    $first: Int\n    $after: String!\n  ) {\n    productDetailsVariants(\n      productId: $productId\n      first: $first\n      after: $after\n    ) {\n      edges {\n        node {\n          id\n          variantId\n          pricing {\n            amount\n            currency\n          }\n          stock\n          selectedOptions {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminProductDetailsVariants(\n    $productId: ID!\n    $first: Int\n    $after: String!\n  ) {\n    productDetailsVariants(\n      productId: $productId\n      first: $first\n      after: $after\n    ) {\n      edges {\n        node {\n          id\n          variantId\n          pricing {\n            amount\n            currency\n          }\n          stock\n          selectedOptions {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminCollectionsList($domain: String!, $first: Int, $after: String!) {\n    allCollections(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          collectionId\n          title\n          description\n          productsCount\n          image {\n            image\n          }\n          seo {\n            title\n            description\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminCollectionsList($domain: String!, $first: Int, $after: String!) {\n    allCollections(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          collectionId\n          title\n          description\n          productsCount\n          image {\n            image\n          }\n          seo {\n            title\n            description\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminCollectionById($id: ID!) {\n    collectionById(id: $id) {\n      collectionId\n      title\n      description\n      productsCount\n      handle\n      seo {\n        title\n        description\n      }\n      image {\n        image\n        imageId\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminCollectionById($id: ID!) {\n    collectionById(id: $id) {\n      collectionId\n      title\n      description\n      productsCount\n      handle\n      seo {\n        title\n        description\n      }\n      image {\n        image\n        imageId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminProductsByCollection(\n    $collectionId: ID!\n    $first: Int\n    $after: String!\n  ) {\n    productsByCollection(\n      collectionId: $collectionId\n      first: $first\n      after: $after\n    ) {\n      edges {\n        node {\n          id\n          productId\n          title\n          status\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminProductsByCollection(\n    $collectionId: ID!\n    $first: Int\n    $after: String!\n  ) {\n    productsByCollection(\n      collectionId: $collectionId\n      first: $first\n      after: $after\n    ) {\n      edges {\n        node {\n          id\n          productId\n          title\n          status\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminProductResourceCollection(\n    $collectionId: ID!\n    $first: Int\n    $after: String!\n    $search: String!\n  ) {\n    productResourceCollection(\n      collectionId: $collectionId\n      first: $first\n      after: $after\n      title_Icontains: $search\n    ) {\n      edges {\n        node {\n          id\n          productId\n          title\n          inCollection\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminProductResourceCollection(\n    $collectionId: ID!\n    $first: Int\n    $after: String!\n    $search: String!\n  ) {\n    productResourceCollection(\n      collectionId: $collectionId\n      first: $first\n      after: $after\n      title_Icontains: $search\n    ) {\n      edges {\n        node {\n          id\n          productId\n          title\n          inCollection\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminCollectionsFind($domain: String!, $search: String!, $first: Int) {\n    collectionsFind(\n      defaultDomain: $domain\n      title_Icontains: $search\n      first: $first\n    ) {\n      edges {\n        node {\n          title\n          collectionId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminCollectionsFind($domain: String!, $search: String!, $first: Int) {\n    collectionsFind(\n      defaultDomain: $domain\n      title_Icontains: $search\n      first: $first\n    ) {\n      edges {\n        node {\n          title\n          collectionId\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CustomerListAdmin($domain: String!, $first: Int, $after: String!) {\n    customerListAdmin(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          customerId\n          fullName\n          defaultAddress {\n            country {\n              name\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query CustomerListAdmin($domain: String!, $first: Int, $after: String!) {\n    customerListAdmin(defaultDomain: $domain, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          customerId\n          fullName\n          defaultAddress {\n            country {\n              name\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CustomerDetails($id: ID!) {\n    customerDetails(id: $id) {\n      firstName\n      lastName\n      email\n      defaultAddress {\n        address1\n        address2\n        city\n        phone\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CustomerDetails($id: ID!) {\n    customerDetails(id: $id) {\n      firstName\n      lastName\n      email\n      defaultAddress {\n        address1\n        address2\n        city\n        phone\n        company\n        zip\n        country {\n          name\n          code\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;